@inject IBalanceRepository BalanceRepository
@inject ICameraRepository CameraRepository
@inject NavigationManager Navigation

@if (Balance is not null)
{
    <EditForm Enhance="true" FormName="AddOrEditForm" OnValidSubmit="SubmitValidForm" Model="Balance" autocomplete="off">

        @if (IsEditMode)
        {
            <input type="hidden" name="Balance.Id" value="@Balance.Id" />
        }

        <div class="mb-3">
            <label for="name" class="form-label">Nome</label>
            <InputText id="name" @bind-Value="Balance.Name" class="form-control" />
            <ValidationMessage For="@(() => Balance.Name)" />
        </div>

        <div class="mb-3">
            <label for="coordinates" class="form-label">Coordenadas (latitude, longitude)</label>
            <InputText id="coordinates" @bind-Value="Balance.Coordinates" class="form-control" />
            <ValidationMessage For="@(() => Balance.Coordinates)" />
        </div>


        <div class="mb-3">
            <label for="cameras" class="form-label">Selecione as Câmeras</label>
            @if (CameraOptions != null && CameraOptions.Any())
            {
                @foreach (var camera in CameraOptions)
                {
                    <div>
                        <input type="checkbox"
                               value="@camera.Id"
                               checked="@(CameraSelection[camera.Id])"
                               @onchange="e => ToggleCameraSelection(camera, (bool)e.Value)">
                        <label>@camera.Description</label>
                    </div>
                }
            }
            <ValidationMessage For="@(() => Balance.Cameras)" />
        </div>

        <div class="d-flex">
            <a href="/balancas" class="btn btn-secondary">Voltar</a>

            @if (IsEditMode)
            {
                <button class="btn btn-danger ms-3"
                        @onclick="OpenConfirmDialog" type="button"
                        disabled="@(Balance.Cameras == null)">
                    Deletar
                </button>
            }

            <button type="submit" class="btn btn-success ms-auto">Salvar</button>
        </div>

        <FluentValidationValidator />
        <ValidationSummary />
    </EditForm>

    <BalanceDialog Show="showConfirmDialog" OnClose="CancelDelete" OnConfirm="DeleteBalance" />
}

@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int BalanceId { get; set; }

    [Parameter]
    public EventCallback<Balance> OnValidBalanceSubmit { get; set; }

    private bool showConfirmDialog;
    public Balance? Balance { get; set; }
    public List<Camera> CameraOptions { get; set; } = new();
    private Dictionary<int, bool> CameraSelection { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        CameraOptions = (await CameraRepository.GetAllAsync()).ToList();

        foreach (var camera in CameraOptions)
        {
            CameraSelection[camera.Id] = false; // Inicializa como não selecionado
        }

        if (IsEditMode)
        {
            Balance ??= await BalanceRepository.GetByIdAsync(BalanceId);

            if (Balance != null)
            {
                foreach (var balanceCamera in Balance.Cameras)
                {
                    if (CameraSelection.ContainsKey(balanceCamera.Id))
                    {
                        CameraSelection[balanceCamera.Id] = true; // Marca como selecionada
                    }
                }
            }
        }
        else
        {
            Balance ??= new();
        }
    }

    private async Task SubmitValidForm()
    {
        await OnValidBalanceSubmit.InvokeAsync(Balance);
    }

    private void ToggleCameraSelection(Camera cameraOption, object isChecked)
    {
        if ((bool)isChecked)
        {
            // Adiciona a câmera apenas se não estiver presente na lista
            if (!Balance.Cameras.Any(c => c.Id == cameraOption.Id))
            {
                Balance.Cameras.Add(cameraOption);
            }
        }
        else
        {
            // Remove a câmera da lista, se estiver presente
            var existingCamera = Balance.Cameras.FirstOrDefault(c => c.Id == cameraOption.Id);
            if (existingCamera != null)
            {
                Balance.Cameras.Remove(existingCamera);
            }
        }
    }

    private void OpenConfirmDialog()
    {
        showConfirmDialog = true;
    }

    private void CancelDelete()
    {
        showConfirmDialog = false;
    }

    private async Task DeleteBalance()
    {
        await BalanceRepository.DeleteAsync(BalanceId);
        showConfirmDialog = false;
        Navigation.NavigateTo("/balancas");
    }
}
