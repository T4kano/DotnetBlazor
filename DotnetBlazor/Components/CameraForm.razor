@inject ICameraRepository Repository
@inject NavigationManager Navigation

@if (Camera is not null)
{
    <EditForm Enhance="true" FormName="AddOrEditForm" OnValidSubmit="HandleSubmit" Model="Camera" autocomplete="off">

        @if (IsEditMode)
        {
            <input type="hidden" name="Camera.Id" value="@Camera.Id" />
        }

        <div class="mb-3">
            <label for="description" class="form-label">Descrição</label>
            <InputText id="description" @bind-Value="Camera.Description" class="form-control" />
            <ValidationMessage For="@(() => Camera.Description)" />
        </div>

        <div class="mb-3">
            <label for="brand" class="form-label">Marca</label>
            <InputText id="brand" @bind-Value="Camera.Brand" class="form-control" />
            <ValidationMessage For="@(() => Camera.Brand)" />
        </div>

        <div class="mb-3">
            <label for="ip" class="form-label">IP</label>
            <InputText id="ip" @bind-Value="Camera.Ip" class="form-control" />
            <ValidationMessage For="@(() => Camera.Ip)" />
        </div>

        <div class="mb-3">
            <label for="cordinates" class="form-label">Coordenadas</label>
            <InputText id="cordinates" @bind-Value="Camera.Coordinates" class="form-control" />
            <ValidationMessage For="@(() => Camera.Coordinates)" />
        </div>

        <div class="d-flex">
            <a href="/cameras" class="btn btn-primary">Voltar</a>

            @if (IsEditMode)
            {
                <button class="btn btn-danger ms-3" @onclick="OpenConfirmDialog" type="button">
                    Deletar
                </button>
            }

            <button class="btn btn-success ms-auto" type="submit">Salvar</button>
        </div>

        <FluentValidationValidator />
        <ValidationSummary />
    </EditForm>

    <CameraDialog Show="showConfirmDialog" OnClose="CancelDelete" OnConfirm="DeleteCamera" />
}

@code {
    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int CameraId { get; set; }

    [Parameter]
    public EventCallback<Camera> OnValidCameraSubmit { get; set; }


    private bool showConfirmDialog;
    public Camera? Camera { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            Camera ??= await Repository.GetByIdAsync(CameraId);
        }
        else
        {
            Camera ??= new();
        }
    }

    private async Task HandleSubmit()
    {
        await OnValidCameraSubmit.InvokeAsync(Camera);
    }

    private void OpenConfirmDialog()
    {
        showConfirmDialog = true;
    }

    private void CancelDelete()
    {
        showConfirmDialog = false;
    }

    private async Task DeleteCamera()
    {
        await Repository.DeleteAsync(CameraId);
        showConfirmDialog = false;
        Navigation.NavigateTo("/cameras");
    }
}
